{{ $all := . }}
{{ $servers := .Servers }}
{{ $cfg := .Cfg }}
{{ $IsIPV6Enabled := .IsIPV6Enabled }}
{{ $backends := .Backends }}

{{ if $cfg.EnableOpentracing }}
load_module /etc/nginx/modules/ngx_http_opentracing_module.so;
{{ end }}

{{ if (and $cfg.EnableOpentracing (ne $cfg.ZipkinCollectorHost "")) }}
load_module /etc/nginx/modules/ngx_http_zipkin_module.so;
{{ end }}

daemon off;

worker_processes {{ $cfg.WorkerProcesses }};
pid /tmp/nginx.pid;
{{ if ne .MaxOpenFiles 0 }}
worker_rlimit_nofile {{ .MaxOpenFiles }};
{{ end}}

# Make env vars accessible from within Lua modules.
env SECRET_KEY_FILE_PATH;
env AUTH_ERROR_PAGE_DIR_PATH;
env OAUTH_CLIENT_ID;
env OAUTH_AUTH_REDIRECTOR;
env WLP_CLIENT_ID;
env CLUSTER_DOMAIN;
env HOST_HEADERS_CHECK_ENABLED;
env ALLOWED_HOST_HEADERS;
env ENABLE_IMPERSONATION;
env OIDC_ISSUER_URL;
env IMPERSONATION_SA_NAME;
env IMPERSONATION_SA_NAMESPACE;
env IMPERSONATION_SA_CLUSTERROLEBINDING;
env APISERVER_SECURE_PORT;

events {
    multi_accept        on;
    worker_connections  {{ $cfg.MaxWorkerConnections }};
    use                 epoll;
}

http {
    lua_shared_dict tokens 256k;
    sendfile            on;
    keepalive_timeout  {{ $cfg.KeepAlive }}s;

    {{ if $cfg.EnableOpentracing }}
    opentracing on;
    {{ end }}

    {{ if (and $cfg.EnableOpentracing (ne $cfg.ZipkinCollectorHost "")) }}
    zipkin_collector_host           {{ $cfg.ZipkinCollectorHost }};
    zipkin_collector_port           {{ $cfg.ZipkinCollectorPort }};
    zipkin_service_name             {{ $cfg.ZipkinServiceName }};
    {{ end }}

    include /opt/ibm/router/nginx/conf/mime.types;
    default_type application/octet-stream;

    {{ if $cfg.DisableAccessLog }}
    access_log off;
    {{ else }}
    access_log {{ $cfg.AccessLogPath }};
    {{ end }}
    error_log  {{ $cfg.ErrorLogPath }} {{ $cfg.ErrorLogLevel }};

    server_tokens {{ if $cfg.ShowServerTokens }}on{{ else }}off{{ end }};
    {{ if not $cfg.ShowServerTokens }}
    more_set_headers "Server: ";
    {{ end }}

    {{ buildResolvers $cfg.Resolver }}

    {{/* Whenever nginx proxies a request without a "Connection" header, the "Connection" header is set to "close" */}}
    {{/* when making the target request.  This means that you cannot simply use */}}
    {{/* "proxy_set_header Connection $http_connection" for WebSocket support because in this case, the */}}
    {{/* "Connection" header would be set to "" whenever the original request did not have a "Connection" header, */}}
    {{/* which would mean no "Connection" header would be in the target request.  Since this would deviate from */}}
    {{/* normal nginx behavior we have to use this approach. */}}
    # Retain the default nginx handling of requests without a "Connection" header
    map $http_upgrade $connection_upgrade {
        default          upgrade;
        ''               close;
    }

    map {{ buildForwardedFor $cfg.ForwardedForHeader }} $the_real_ip {
    {{ if $cfg.UseProxyProtocol }}
        # Get IP address from Proxy Protocol
        default          $proxy_protocol_addr;
    {{ else }}
        default          $remote_addr;
    {{ end }}
    }

    # trust http_x_forwarded_proto headers correctly indicate ssl offloading
    map $http_x_forwarded_proto $pass_access_scheme {
        default          $http_x_forwarded_proto;
        ''               $scheme;
    }

    # validate $pass_access_scheme and $scheme are http to force a redirect
    map "$scheme:$pass_access_scheme" $redirect_to_https {
        default          0;
        "http:http"      1;
        "http:https"     1;
    }

    map $http_x_forwarded_port $pass_server_port {
        default           $http_x_forwarded_port;
        ''                $server_port;
    }

    map $http_x_forwarded_host $best_http_host {
        default          $http_x_forwarded_host;
        ''               $this_host;
    }

    # Obtain best http host
    map $http_host $this_host {
        default          $http_host;
        ''               $host;
    }

    ssl_protocols {{ $cfg.SSLProtocols }};

    # turn on session caching to drastically improve performance
    {{ if $cfg.SSLSessionCache }}
    ssl_session_cache builtin:1000 shared:SSL:{{ $cfg.SSLSessionCacheSize }};
    ssl_session_timeout {{ $cfg.SSLSessionTimeout }};
    {{ end }}

    # slightly reduce the time-to-first-byte
    ssl_buffer_size {{ $cfg.SSLBufferSize }};

    {{ if not (empty $cfg.SSLCiphers) }}
    # allow configuring custom ssl ciphers
    ssl_ciphers '{{ $cfg.SSLCiphers }}';
    ssl_prefer_server_ciphers on;
    {{ end }}

    {{ range $name, $upstream := $backends }}

    upstream {{ $upstream.Name }} {
        {{ if $upstream.UpstreamHashBy }}
        hash {{ $upstream.UpstreamHashBy }} consistent;
        {{ else }}
        # Load balance algorithm; empty for round robin, which is the default
        {{ if ne $cfg.LoadBalanceAlgorithm "round_robin" }}{{ $cfg.LoadBalanceAlgorithm }};{{ end }}
        {{ end }}

        {{ if (gt $cfg.UpstreamKeepaliveConnections 0) }}
        keepalive {{ $cfg.UpstreamKeepaliveConnections }};
        {{ end }}

        server {{ $upstream.ClusterIP | formatIP }}:{{ $upstream.Port }};
    }

    {{ end }}

    lua_package_path '$prefix/conf/?.lua;;';
    lua_shared_dict shmlocks 1m;

    # Loading the auth module in the global Lua VM in the master process is a
    # requirement, so that code is executed under the user that spawns the
    # master process instead of 'nobody' (which workers operate under).
    init_by_lua '
        common = require "common"
        auth = require "oauthproxy"
        protect = require "protection"
        ngx.log(ngx.NOTICE, "Use ocpiam module.")
    ';

    {{ range $index, $server := $servers }}

    ## start server {{ $server.Hostname }}
    server {
        server_name {{ $server.Hostname }} {{ $server.Alias }};
        {{ template "SERVER" serverConfig $all $server }}
    }
    ## end server {{ $server.Hostname }}

    {{ end }}

}


{{/* definition of server-template to avoid repetitions with server-alias */}}
{{ define "SERVER" }}
        {{ $all := .First }}
        {{ $server := .Second }}
        listen {{ $all.ListenPorts.HTTP }}{{ if eq $server.Hostname "_"}} default_server reuseport backlog={{ $all.BacklogSize }}{{end}};
        {{ if $all.IsIPV6Enabled }}
        listen [::]:{{ $all.ListenPorts.HTTP }}{{ if eq $server.Hostname "_"}} default_server reuseport backlog={{ $all.BacklogSize }}{{ end }};
        {{ end }}
        set $proxy_upstream_name "-";

        {{/* Listen on {{ $all.ListenPorts.SSLProxy }} because port {{ $all.ListenPorts.HTTPS }} is used in the TLS sni server */}}
        {{/* This listener must always have proxy_protocol enabled, because the SNI listener forwards on source IP info in it. */}}
        {{ if not (empty $server.SSLCertificate) }}
        listen {{ $all.ListenPorts.HTTPS }} {{ if eq $server.Hostname "_"}} default_server reuseport backlog={{ $all.BacklogSize }}{{end}} ssl;
        {{ if $all.IsIPV6Enabled }}
        listen [::]:{{ $all.ListenPorts.HTTPS }} {{ if eq $server.Hostname "_"}} default_server reuseport backlog={{ $all.BacklogSize }}{{end}} ssl;
        {{ end }}
        {{ end }}
        {{/* comment PEM sha is required to detect changes in the generated configuration and force a reload */}}
        # PEM sha: {{ $server.SSLPemChecksum }}
        ssl_certificate                         {{ $server.SSLCertificate }};
        ssl_certificate_key                     {{ $server.SSLCertificate }};

        root /opt/ibm/router/nginx/html;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";

        {{ range $location := $server.Locations }}
        {{ $path := buildLocation $location }}

        {{ if not (empty $location.Rewrite.AppRoot)}}
        location = / {
            access_by_lua_block {
            protect.validate_host_header();
            return ngx.redirect("{{ $location.Rewrite.AppRoot }}", 302);
            }
        }
        {{ end }}

        location {{ $path }} {
            set $proxy_upstream_name "{{ buildUpstreamName $server.Hostname $all.Backends $location }}";

            access_by_lua_block {
            protect.validate_host_header();
            {{ if eq $location.AuthType "id-token" }}auth.validate_id_token_or_exit();{{end}}
            {{ if eq $location.AuthType "access-token" }}auth.validate_access_token_or_exit();{{end}}
            {{ if eq $location.AuthzType "rbac" }}auth.validate_policy_or_exit();{{end}}
            }

            {{ $ing := (getIngressInformation $location.Ingress $path) }}
            {{/* $ing.Metadata contains the Ingress metadata */}}
            set $namespace      "{{ $ing.Namespace }}";
            set $ingress_name   "{{ $ing.Rule }}";
            set $service_name   "{{ $ing.Service }}";

            client_max_body_size                    "{{ $location.Proxy.BodySize }}";

            proxy_set_header Host                   $best_http_host;

            # Allow websocket connections
            proxy_set_header                        Upgrade           $http_upgrade;
            {{ if $location.Connection.Enabled}}
            proxy_set_header                        Connection        {{ $location.Connection.Header }};
            {{ else }}
            proxy_set_header                        Connection        $connection_upgrade;
            {{ end }}

            proxy_set_header X-Real-IP              $the_real_ip;
            {{ if $all.Cfg.ComputeFullForwardedFor }}
            proxy_set_header X-Forwarded-For        $full_x_forwarded_for;
            {{ else }}
            proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
            {{ end }}
            proxy_set_header X-Forwarded-Host       $best_http_host;
            proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
            proxy_set_header X-Original-URI         $request_uri;
            proxy_set_header X-Scheme               $pass_access_scheme;

            # mitigate HTTPoxy Vulnerability
            # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
            proxy_set_header Proxy                  "";

            proxy_connect_timeout                   {{ $location.Proxy.ConnectTimeout }}s;
            proxy_send_timeout                      {{ $location.Proxy.SendTimeout }}s;
            proxy_read_timeout                      {{ $location.Proxy.ReadTimeout }}s;

            proxy_buffering                         off;
            proxy_buffer_size                       "{{ $location.Proxy.BufferSize }}";
            proxy_buffers                           4 "{{ $location.Proxy.BufferSize }}";

            proxy_cookie_path                       / "/; Secure";

            {{/* Add any additional configuration defined */}}
            {{ $location.ConfigurationSnippet }}

            {{ if not (empty $location.Backend) }}
            {{ buildProxyPass $server.Hostname $all.Backends $location }}
            {{ buildSSLVeify $all.Backends $location }}
            {{ buildClientCAAuth $all.Backends $location }}
            {{ else }}
            # No endpoints available for the request
            return 503;
            {{ end }}
        }

        {{ end }}

        {{ if eq $server.Hostname "_" }}
        location /dcos-metadata/ui-config.json {
            try_files /dcos-metadata/ui-config.json =404;
        }

        location /metadata {
            access_by_lua 'auth.validate_access_token_or_exit()';
            content_by_lua_file conf/metadata.lua;
        }

        location /index.html {
            return 404;
        }

        # For NGINX healthcheck and access to nginx stats
        location /healthz {
            access_log off;
            return 200;
        }

        {{ end }}

{{ end }}
