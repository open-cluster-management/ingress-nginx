---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: "ingress-open-cluster-management"
    ingress.open-cluster-management.io/auth-type: "access-token"
    ingress.open-cluster-management.io/secure-backends: "true"
    ingress.open-cluster-management.io/secure-client-ca-secret: "monitoring-client-certs"
    ingress.open-cluster-management.io/rewrite-target: "/"
spec:
  rules:
  - http:
      paths:
      - path: /grafana
        backend:
          serviceName: monitoring-grafana
          servicePort: 3001

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: alertmanager
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: "ingress-open-cluster-management"
    ingress.open-cluster-management.io/auth-type: "access-token"
    ingress.open-cluster-management.io/secure-backends: "true"
    ingress.open-cluster-management.io/secure-client-ca-secret: "monitoring-client-certs"
    ingress.open-cluster-management.io/rewrite-target: "/"
spec:
  rules:
  - http:
      paths:
      - path: /alertmanager
        backend:
          serviceName: monitoring-prometheus-alertmanager
          servicePort: 9093

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: "ingress-open-cluster-management"
    ingress.open-cluster-management.io/auth-type: "access-token"
    ingress.open-cluster-management.io/secure-backends: "true"
    ingress.open-cluster-management.io/secure-client-ca-secret: "monitoring-client-certs"
    ingress.open-cluster-management.io/configuration-snippet: |
            header_filter_by_lua_block { ngx.header.content_length = nil }
            body_filter_by_lua_block {
              local data = ngx.arg[1]
              if string.startswith(ngx.header.content_type, 'text/html') then
                data = ngx.re.gsub(data, '="/','="/prometheus/')
                data = ngx.re.gsub(data, 'var PATH_PREFIX = "";','var PATH_PREFIX = "/prometheus";')
              end
              ngx.arg[1] = data
            }
spec:
  rules:
  - http:
      paths:
      - path: /prometheus/
        backend:
          serviceName: monitoring-prometheus
          servicePort: 9090

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus-graph
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: "ingress-open-cluster-management"
    ingress.open-cluster-management.io/auth-type: "access-token"
    ingress.open-cluster-management.io/secure-backends: "true"
    ingress.open-cluster-management.io/secure-client-ca-secret: "monitoring-client-certs"
    ingress.open-cluster-management.io/location-modifier: "="
    ingress.open-cluster-management.io/upstream-uri: "/graph"
    ingress.open-cluster-management.io/configuration-snippet: |
            header_filter_by_lua_block { ngx.header.content_length = nil }
            body_filter_by_lua_block {
              local data = ngx.arg[1]
              if string.startswith(ngx.header.content_type, 'text/html') then
                data = ngx.re.gsub(data, '="/','="/prometheus/')
                data = ngx.re.gsub(data, 'var PATH_PREFIX = "";','var PATH_PREFIX = "/prometheus";')
              end
              ngx.arg[1] = data
            }
spec:
  rules:
  - http:
      paths:
      - path: /prometheus
        backend:
          serviceName: monitoring-prometheus
          servicePort: 9090
